import gradio as gr
from tasks import generate_2d_image_task, generate_image_from_grid_task, generate_3d_from_2d_task, decimate_3d_task
import json
import time
import io
from PIL import Image

def load_sample_grid():
    sample_grid = """
[[0,0,1,1,0,0,2,2,0,0],
[0,1,1,1,1,0,2,2,2,0],
[1,1,1,1,1,1,0,2,2,2],
[1,1,1,1,1,1,0,0,2,2],
[0,1,1,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[3,3,3,3,3,3,3,3,3,3],
[3,3,3,3,3,3,3,3,3,3],
[4,4,4,4,0,0,0,0,0,0],
[4,4,4,4,0,0,0,0,0,0]]
    """
    return sample_grid.strip()

def launch_2d_generation(text_prompt, width, height, num_images, s3_bucket_name, base_filename):
    """Starts the 2D image generation task and returns the task ID."""
    task = generate_2d_image_task.delay(text_prompt, width, height, num_images, s3_bucket_name, base_filename)
    return task.id

def check_2d_generation_status(task_id):
    """Checks the status of the 2D image generation task and updates the UI."""
    if not task_id:
        return "Waiting for task to start...", [], None
    
    task = generate_2d_image_task.AsyncResult(task_id)
    
    if task.state == 'PENDING':
        return "Task is pending...", [], None
    elif task.state == 'PROGRESS':
        status = task.info.get('status', 'Processing...')
        results = task.info.get('result', [])
        return status, results, None
    elif task.state == 'SUCCESS':
        status = task.info.get('status', "Task complete!")
        results = task.info.get('result', [])
        html_output = f"<h3>Generated Images:</h3>"
        for url in results:
            html_output += f"<a href='{url}' target='_blank'>Download Image</a><br>"
        return status, results, html_output
    elif task.state == 'FAILURE':
        error_msg = task.info.get('error', "An error occurred.")
        return f"Error: {error_msg}", [], None
    else:
        return f"Task state: {task.state}", [], None

def launch_grid_generation(grid_data_str, width, height, num_images, s3_bucket_name, base_filename):
    """Starts the grid visualization task and returns the task ID."""
    task = generate_image_from_grid_task.delay(grid_data_str, width, height, num_images, s3_bucket_name, base_filename)
    return task.id

def check_grid_generation_status(task_id):
    """Checks the status of the grid generation task and updates the UI."""
    if not task_id:
        return "Waiting for task to start...", None
    
    task = generate_image_from_grid_task.AsyncResult(task_id)
    
    if task.state == 'PENDING':
        return "Task is pending...", None
    elif task.state == 'PROGRESS':
        status = task.info.get('status', 'Processing...')
        results = task.info.get('result', [])
        
        # Convert URLs to images for display in Gradio gallery
        images = []
        for url in results:
            images.append(url)
        
        return status, images
    elif task.state == 'SUCCESS':
        status = task.info.get('status', "Task complete!")
        results = task.info.get('result', [])
        
        # Convert URLs to images
        images = []
        for url in results:
            images.append(url)
            
        return status, images
    elif task.state == 'FAILURE':
        error_msg = task.info.get('error', "An error occurred.")
        return f"Error: {error_msg}", None
    else:
        return f"Task state: {task.state}", None

def launch_3d_generation(image_2d_input, s3_bucket_name, base_filename):
    """Starts the 3D model generation task."""
    if image_2d_input is None:
        return None
    
    image_bytes = io.BytesIO()
    image_2d_input.save(image_bytes, format='PNG')
    image_bytes.seek(0)
    
    task = generate_3d_from_2d_task.delay(image_bytes.getvalue(), s3_bucket_name, base_filename)
    return task.id

def check_3d_generation_status(task_id):
    """Checks the status of the 3D model generation task."""
    if not task_id:
        return "Waiting for task to start...", None
    
    task = generate_3d_from_2d_task.AsyncResult(task_id)
    
    if task.state == 'PENDING':
        return "Task is pending...", None
    elif task.state == 'PROGRESS':
        status = task.info.get('status', 'Processing...')
        return status, None
    elif task.state == 'SUCCESS':
        status = task.info.get('status', "Task complete!")
        url = task.info.get('result', None)
        return status, gr.HTML(f"<a href='{url}' target='_blank'>Download 3D Model</a>")
    elif task.state == 'FAILURE':
        error_msg = task.info.get('error', "An error occurred.")
        return f"Error: {error_msg}", None
    else:
        return f"Task state: {task.state}", None
        
def launch_decimation_task(input_3d_file, s3_bucket_name, base_filename):
    """Starts the 3D decimation task."""
    if input_3d_file is None:
        return None
    
    with open(input_3d_file.name, 'rb') as f:
        file_bytes = f.read()

    task = decimate_3d_task.delay(file_bytes, s3_bucket_name, base_filename)
    return task.id

def check_decimation_status(task_id):
    """Checks the status of the 3D decimation task."""
    if not task_id:
        return "Waiting for task to start...", None
        
    task = decimate_3d_task.AsyncResult(task_id)

    if task.state == 'PENDING':
        return "Task is pending...", None
    elif task.state == 'PROGRESS':
        status = task.info.get('status', 'Processing...')
        return status, None
    elif task.state == 'SUCCESS':
        status = task.info.get('status', "Task complete!")
        url = task.info.get('result', None)
        return status, gr.HTML(f"<a href='{url}' target='_blank'>Download Decimated 3D Model</a>")
    elif task.state == 'FAILURE':
        error_msg = task.info.get('error', "An error occurred.")
        return f"Error: {error_msg}", None
    else:
        return f"Task state: {task.state}", None

with gr.Blocks(title="AI-Powered 3D Asset Generator") as demo:
    gr.Markdown("# AI-Powered 3D Asset Generator")
    gr.Markdown("This application uses Celery to run generation tasks in the background, keeping the Gradio app responsive. The generated assets are uploaded to S3.")

    s3_bucket_input_global = gr.Textbox(label="S3 Bucket Name", value="sparkassets", interactive=True)
    
    # State variables to store task IDs
    task_id_state = gr.State(None)

    with gr.Tabs():
        with gr.TabItem("Text to Image"):
            gr.Markdown("## Text-to-Image Generation")
            gr.Markdown("Generate images from text descriptions. **All prompts are automatically optimized for 3D asset generation**.")
            
            with gr.Row():
                gr.Markdown("### ðŸŽ¯ 3D Generation Optimization")
                gr.Checkbox(label="Enabled", value=True, interactive=False) 

            text_to_image_prompt = gr.Textbox(
                label="Text Prompt", 
                placeholder="ðŸ’¡ Tip: Describe objects clearly for best 3D generation results.",
                lines=3
            )
            base_filename_txt2img = gr.Textbox(label="Base Filename for Image(s)", placeholder="e.g., my_2d_image")

            with gr.Row():
                width_slider_txt2img = gr.Slider(minimum=256, maximum=1024, value=512, step=64, label="Width")
                height_slider_txt2img = gr.Slider(minimum=256, maximum=1024, value=512, step=64, label="Height")
            
            with gr.Row():
                num_images_slider_txt2img = gr.Slider(minimum=1, maximum=4, value=1, step=1, label="Number of Images")
                model_dropdown_txt2img = gr.Dropdown(
                    label="Model", 
                    choices=["SDXL Turbo: High-quality local GPU image generation optimized for 3D"], 
                    value="SDXL Turbo: High-quality local GPU image generation optimized for 3D",
                    interactive=False
                )
            
            generate_image_button = gr.Button("ðŸš€ Generate Image from Text")
            image_generation_status = gr.Textbox(label="Image Generation Status", lines=1)
            image_generation_output = gr.Gallery(label="Generated Images", columns=2, height='auto')
            image_generation_link = gr.HTML(label="Download Links")
            
            generate_image_button.click(
                fn=launch_2d_generation,
                inputs=[text_to_image_prompt, width_slider_txt2img, height_slider_txt2img, num_images_slider_txt2img, s3_bucket_input_global, base_filename_txt2img],
                outputs=[task_id_state]
            ).then(
                fn=check_2d_generation_status,
                inputs=[task_id_state],
                outputs=[image_generation_status, image_generation_output, image_generation_link],
                every=2 # Check status every 2 seconds
            )
        
        with gr.TabItem("Grid to Image"):
            gr.Markdown("## Grid to Image Visualization")
            gr.Markdown("""
            **Grid Format**
            Use numbers to represent different terrain types:
            * **0**: Plain
            * **1**: Forest
            * **2**: Mountain
            * **3**: Water
            * **4**: Desert
            * **5**: Snow
            * **6**: Swamp
            * **7**: Hills
            * **8**: Urban
            * **9**: Ruins
            """)
            
            grid_data_input = gr.Textbox(label="Grid Data (JSON array of arrays)", lines=10, 
                                         placeholder="Example: [[0,0,1,1],[0,1,1,0]]")
            load_sample_grid_button = gr.Button("Load Sample Grid")
            
            base_filename_grid2img = gr.Textbox(label="Base Filename for Visualization", placeholder="e.g., my_grid_map")

            with gr.Row():
                width_slider_grid2img = gr.Slider(minimum=256, maximum=1024, value=512, step=64, label="Width")
                height_slider_grid2img = gr.Slider(minimum=256, maximum=1024, value=512, step=64, label="Height")
            
            with gr.Row():
                num_images_slider_grid2img = gr.Slider(minimum=1, maximum=4, value=1, step=1, label="Number of Images")
                model_dropdown_grid2img = gr.Dropdown(
                    label="Model", 
                    choices=["SDXL Turbo: High-quality local GPU image generation optimized for 3D"], 
                    value="SDXL Turbo: High-quality local GPU image generation optimized for 3D",
                    interactive=False
                )
            
            generate_grid_image_button = gr.Button("Generate Image from Grid")
            grid_generation_status = gr.Textbox(label="Status", lines=1)
            grid_visualization_output = gr.Gallery(label="Grid Visualization", columns=2, height='auto')
            
            load_sample_grid_button.click(
                fn=load_sample_grid,
                inputs=[],
                outputs=[grid_data_input]
            )

            generate_grid_image_button.click(
                fn=launch_grid_generation,
                inputs=[grid_data_input, width_slider_grid2img, height_slider_grid2img, num_images_slider_grid2img, s3_bucket_input_global, base_filename_grid2img],
                outputs=[task_id_state]
            ).then(
                fn=check_grid_generation_status,
                inputs=[task_id_state],
                outputs=[grid_generation_status, grid_visualization_output],
                every=2 # Check status every 2 seconds
            )

        with gr.TabItem("3D Generation"):
            gr.Markdown("## 3D Model Generation from 2D Image")
            gr.Markdown("Upload a 2D image to generate a 3D GLB model.")
            
            input_2d_image_for_3d = gr.Image(label="Upload 2D Image", type="pil")
            base_filename_3d_gen = gr.Textbox(label="Base Filename for 3D Model (e.g., my_3d_asset)")
            
            generate_3d_button = gr.Button("Generate 3D Model")
            status_3d_gen = gr.Textbox(label="3D Generation Status", lines=1)
            output_3d_model_link = gr.HTML(label="Generated 3D Model Link")

            generate_3d_button.click(
                fn=launch_3d_generation,
                inputs=[input_2d_image_for_3d, s3_bucket_input_global, base_filename_3d_gen],
                outputs=[task_id_state]
            ).then(
                fn=check_3d_generation_status,
                inputs=[task_id_state],
                outputs=[status_3d_gen, output_3d_model_link],
                every=2 # Check status every 2 seconds
            )

        with gr.TabItem("Decimated 3D"):
            gr.Markdown("## Decimate 3D Model")
            gr.Markdown("Upload an existing 3D GLB/OBJ/STL model to reduce its polygon count.")
            
            input_3d_file_decimate = gr.File(label="Upload 3D Model (GLB, OBJ, STL)", type="filepath")
            base_filename_decimate = gr.Textbox(label="Base Filename for Decimated Model (e.g., my_decimated_asset)")
            
            decimate_button = gr.Button("Decimate 3D Model")
            status_decimate = gr.Textbox(label="Decimation Status", lines=1)
            output_decimated_model_link = gr.HTML(label="Decimated 3D Model Link")

            decimate_button.click(
                fn=launch_decimation_task,
                inputs=[input_3d_file_decimate, s3_bucket_input_global, base_filename_decimate],
                outputs=[task_id_state]
            ).then(
                fn=check_decimation_status,
                inputs=[task_id_state],
                outputs=[status_decimate, output_decimated_model_link],
                every=2 # Check status every 2 seconds
            )

demo.launch(server_name="0.0.0.0", server_port=7860)
